Методы поиска плагиата в кодах программ
Ключевые слова: плагиат, метрики для обнаружения плагиата, токен.

##Аннотация

Изучены такие виды представления кодов программ, как текст без преобразований, n - граммы и токены. На языке программирования Python реализовано разбиение текстов программ из массива решений студентов на токены. Сформулированы требования к алгоритмам обнаружения плагиата. Проведен обзор аналогов метрик для обнаружения плагиата в текстах программ. После сравнения метрик: численных значений атрибутов, наибольшей общей подпоследовательности, расстояния Жаккара, расстояния Левенштейна и расстояния Колмогорова, между собой для реализации выбран расчет расстояния Левенштейна. Полученные результаты показывают, насколько тексты программ похожи между собой.

##Введение

Цифровой контент все чаще подвергается копированию. Люди цитируют друг друга, а также соавторство порождает увеличение копий работ. Соответственно возникает необходимость установления авторских прав на интеллектуальный труд, а также проверка новых работ на плагиат.

Под плагиатом понимается: "Умышленное присвоение авторства чужого произведения или использование в своих трудах чужого произведения без ссылки на автора"[1].

В учебной деятельности проблема обнаружения плагиата является очень актуальной, потому что многие студенты копируют решения у одноклассников или берут из интернета. В иностранных вузах контроль за списыванием студентов ведется постоянно.

Целью является реализация программного модуля, осуществляющего поиск плагиата в кодах программ. Объектом исследования является методы обнаружения плагиата, а предметом расстояние между текстами программ.

Поставлены следующие задачи:

Выделить способы представления данных для поиска плагиата в кодах программ.

Сформулировать требования к алгоритмам обнаружения плагиата.

Исследовать существующие методы поиска плагиата.

Выделить достоинства и недостатки существующих методов.

Реализовать алгоритм обнаружения плагиата в кодах программ, написанных на языке Octave.

Системы обнаружения плагиата также применяются в таких задачах, как указание точных источников заимствования информации, повышение точности поисковой выдачи, кластеризация кода по выбранным параметрам.

Нетривиальным является найти такое решение, которое гарантированно найдет копирование чужого кода, включая небольшие участки в большом объеме данных. Необходимо также, чтобы код программы, в которым заменены имена переменных или их порядок, обнаруживался как скопированный при наличии совпадений. Высокие требования безусловно усложняют задачу. Поэтому возникает необходимость изучить существующие методы обнаружения плагиата и проанализировать их, выделив преимущества и недостатки. А создание удобного программного инструмента для обнаружения плагиата представляет собой актуальную задачу.

Для выявления плагиата основным методом является расчет расстояния между текстами. Имеющие на рынке решения не позволяют работать с большим количеством коротких программ, не предоставляют пользователям удобного интерфеса и, зачастую, их функционал сильно ограничен.

##Обзор алгоритмов обнаружения плагиата в кодах программ

1. Виды представления исходных кодов программ

Входными данными модуля проверки на плагиат является текст программы. Для анализа на плагиат могут быть использованы исходный, объектный или исполняемый код программ. Был выбран исходный код, так как в нем содержится больше информации, характеризующей стилистические особенности конкретного автора. Первым шагом для реализации модуля обнаружения плагиата является выбор способа представления данных в кодах программ.

1.1. Исходный текст без преобразований

Можно рассматривать исходный код без преобразований. Такой метод представления данных крайне неэффективен, так как при анализе численных выражений признаков программы у разных программ могут быть получены близкие значения.

1.2. Элементы n-мерного пространства: N-граммы

N-грамма — это непрерывная подстрока из n элементов. Тексты программ разбиваются на N-граммы, и составляются списки слов, содержащие эти подстроки. Далее последовательно перебираются и сравниваются списки слов, которые содержат конкретные n-граммы. Если два слова совпадают с погрешностью, то вероятно для них найдется хотя бы одна общая n-грамма. Чтобы определить насколько похожи слова в двух программ, следует задать метрику.

Параметр разбиения n выбирается пользователем. Выбор большого значения N ведет к тому, что слова длины меньшей, чем n могут быть не найдены.

Например, есть текст: «function [X, Y] = task3(A, B)». После разделения на подстроки длины 4: «func», «unct», «ncti», «ctio», «tion» и так далее.

Можно улушить алгоритм хешированием по сигнатуре[2]. В качетве хеша используется группа символов из алфавита. Бит 1 на позиции i в хеше означает, что в исходном слове присутствует n-грамма из i-ой группы алфавита. Такие хеши вычисляются для каждой программы. Далее в списки группируются слова, которые имеют одинаковое значение хеша. Составляется таблица соответствия хеша и списка слов. Алгоритм находит сначала списки слов, которые могут удовлетворять запросу, а потом ищет сами слова. Похожие слова будут располагаться в смежных ячейках, что позволяет осуществлять поиск эффективнее, без многократного чтения из разных позиций.

Значение хеша не чувствительно к порядку символов или удалению или вставки одного символа. При этом хеширование по сигнатуре очень чувствительно к выбору параметров и хеш-функции.

1.3. Список токенов

Токенизация — это процесс преобразования текста в последовательность строк (лексических единиц) с определенным значением (токенов) [3].

Токены состоят из имени токена и его значения, которое не обязательно может присутствовать. Имя токена представляет собой категорию лексической единицы. Выделяют следующие общие имена (таблица 1):

Таблица 1. Имена токенов

Имя токена	Описание	Примеры
Идентификаторы	Имена переменных или функий, которые задает программист	x, tokenizer, digit
Ключевые слова	Имена индентификаторов, которые имеют специальное значение для компиляторов на языке программирования (не могут совпадать с именами переменных)	function, if, for
Разделители	Знаки пунктуации и парные разделители	{, (, ;
Операторы	Набор команд	+, =, <
Литералы	Фиксированные значения некоторого типа данных	True, 1, «String»
Комментарии	Строка или блок, содержащие пояснения к коду	# решаем систему уравнений A*X = B
Токенизация позволяет сохранять существенные и игнорировать легко модифицируемые детали кода программы.

2. Требования к алгоритму

При сравнении алгоритмов выдвигаются критерии:

Сложность(оценка времени) алгоритмов поиска плагиата.
Оценка памяти алгоритма.
С какой вероятностью конкретная пара похожих программ будет найдена алгоритмом.
С какой вероятностью пара программ, определенная алгоритмом как похожие, действительно является похожей.
Первые два критерия показывают затраты на реализацию алгоритма. А вторые два связаны непосредственно с обнаружением плагиата в текстах программ, и показывают вероятности найти правильные решения.

Для того, чтобы определить насколько программы похожи между собой требуется ввести метрику.

3. Обзор аналогов: метрики для обнаружения плагиата в текстах программ

3.1. Численное значение атрибутов

Сравнение численных выражений признаков, иначе говоря атрибутов программы, относится к атрибутным методам поиска плагиата. Программы будут считаться похожими, если полученные численные выражения атрибутов близки. Например, количество операторов или операндов в программе, их количество относительно длины программы. Оценка схожести сводится к сравнению численных значений или их векторов, получаемых с помощью анализа исходного текста программ.

Можно комбинировать несколько признаков, так чтобы программа была представлена не одним значением, а вектором. Две программы будут считаться похожими, если соответствующие значения из составленных из них векторов равны или близки. Можно уточнить метод, проведя частотный анализ количества операторов в тексте или анализ их последовательности.

При высокой вероятности найти похожие программы вероятность того, что найденное решение действительно будет похожим, достаточно низкая.

Преимущества:

Простота реализации.

Подходит для разных языков программирования.

Недостатки:

Несвязанные между собой характеристики исходного кода плохо описывают его в целом.

Разные программы могут получать близкие характеристики.

Квадратичная зависимость времени от длины исходного кода программы.

3.2. Наибольшая общая подпоследовательность

Задача сводится к тому, чтобы найти все такие наибольшие последовательности, которые являются подпоследовательностями нескольких последовательностей из разных текстов программ.

Подпоследовательность получается из некоторой конечной последовательности, если удалить из нее некоторое множество ее элементов, в том числе и пустой. Например, ftion является подпоследовательностью последовательности function. Считается, что последовательность является общей подпоследовательностью двух последовательностей, если она является подпоследовательностью обеих последовательностей. Требуется для двух последовательностей найти все общие подпоследовательности наибольшей длины.

Большинство алгоритмов нахождения наибольшей общей подпоследовательности используют подход динамического программирования и работают за квадратичное время при линейной памяти [4] [5].

Вероятность найти похожие программы очень высокая. Но при этом достаточно высока вероятность того, что найденные решения не будут похожими из-за того, что подпоследовательностями могут являться короткие или часто встречающие слова.

Преимущества:

Простота реализации.

Подходит для разных языков программирования.

Нечувствительность к изменению текстов.

Недостатки:

Для одних и тех же слов наибольшие общие подпоследовательности могут быть не единственны.
3.3. Расстояние Жаккара

Коэффициент (индекс) сходства Жакарра сравнивает элементы из двух текстов и определяет, какие из них являются общими, а какие — различными. Для улучшения метода обычно текст исходного кода программ представляют в виде n — грамм. Коэффициент Жаккара равен количеству общих элементов, деленному на количество всех элементов в обоих текстах. Или иначе говоря, пересечение двух текстов деленное на их объединение. Мера показывает, насколько похожи два текста и принимает значения от 0 до 1.

Расстояние Жакарра показывает, насколько различны два текста. Оно является дополнением к коэффициенту Жаккара и может быть найден вычитанием коэффициента Жаккара из 1.

Метод работает за квадратичное время при линейной памяти. Вероятность найти похожие программы и вероятность того, что они будут действительно похожи, высокие.

Преимущества:

Легко интерпретировать.
Недостатки:

При малых наборах данных может дать неверный результат.

Возможны совпадения при токенизированном представлении программ, но их отсутствие в исходных кодах программ.

Из-за небольшого количества уникальных k-граммов в больших программах, многие совпадения, не содержащие в себе таких k-граммов не будут добавлены в решение.

Вставка или изменение найденного блока может привести к игнорированию той части блока, в которой не содержится уникальный k-грамм.

3.4. Расстояние Левенштейна

Для того, чтобы найти функцию расстояния между двумя словами, метрику, наиболее часто применяют расстояние Левенштейна. Расстояние Левенштейна является дистанцией редактирования, то есть минимальным количеством операций вставки, удаления или замены одного символа на другой, необходимых для превращения одной строки в другую.

Сначала текст программ разбивается на токены. Далее составляется матрица, которая заполняется расстояниями между каждыми токенами.

Алгоритм имеет временную сложность O(mn) и потребляет O(mn) памяти, где m и n — длины сравниваемых строк. Можно также оптимизировать алгоритм отсечением Укконена, и свести временную сложность к O (n + d ^ 2), где n - длина более длинной строки, d - расстояние редактирования, а память к O(min(m, n)), где m и n — длины сравниваемых строк.

Вероятность найти похожие программы очень высокая, а найденные решения с высокой вероятностью действительно будут похожими.

Преимущества:

Преимущества токенизированного представления данных.
Недостатки:

При перестановке местами слов или их частей могут получаться большие расстояния.

Расстояния между совершенно разными короткими словами оказываются небольшими, а между очень похожими длинными словами — значительными.

3.5. Расстояние Колмогорова

При реализации алгоритмов Колмогоровской сложности начала текст разделяется на токены, далее идет поиск длиннейшей неточно повторяющейся подстроки, заканчивающейся в текущем символе, кодируется указателем на предыдущее размещение и сохраняет информацию о внесенных поправках. В результате, будут найдены неточно совпавшие пары подстрок.

Расстояние между строками показывает, сколько информации содержит строка, и вычисляется [7]: , где K(x) — Колмогоровская сложность строки x. Чем ближе функция расстояния к 0, тем более схожи программы. Сложность Колмогорова в строке x является минимальной длиной программы, необходимой для вычисления конкретной строки x.

Колмогоровская сложность применяется к строкам, но не применяется к программам. Было доказано, что невозможно вычислить колмогоровскую сложность строки [8].

Преимущества:

Универсальность: две программы, близкие относительно любой другой метрики, будут близкими и относительно данной.

Быстрота.

Преимущества токенизированного представления данных.

Общие маленькие подстроки игнорируются, поэтому алгоритм не чувствителен к малым случайно совпавшим участкам кода.

При разбиении совпавшего участка кода на несколько частей вставкой или перестановкой одного или нескольких блоков кода, функция схожести слабо изменяется.

Алгоритм нечувствителен к перестановкам больших фрагментов кода.

Недостатки:

Возможноть совпадения токенизированного представления программ, но несовпадения в исходных кодах программ.

Невозможность использования на практике.

Сравнение описанных алгоритмов представлено в таблице 2.

Таблица2. Сравнение описанных алгоритмов

Метрика	Время	Память	Вероятность найти похожие программы	Вероятность, что похожие программы действительно похожие
Численные значения атрибутов	Квадратичное	Линейная	Высокая	Низкая
Наибольшая общая подпоследовательность	Квадратичное	Линейная	Очень высокая	Низкая
Расстояние Жаккара	Квадратичное	Линейная	Высокая	Высокая
Расстояние Левенштейна	Квадратичное	Квадратичная, сводится к O(min{m,n})	Очень высокая	Высокая
Расстояние Колмогорова	Сверхлинейное	.	.	.
Наилучшее время показывает расстояние Колмогорова, однако его невозможно реализовать на практике. Затраты памяти наихудшие у расстояния Левенштейна. Следует отметить, что для выполнения задач важно качество преобразований текста, а затраты менее важны. Наивысшую вероятность найти похожие программы показывает расстояние Левенштейна.

Выбор метода решения
Для успешного обнаружения плагиата данные разбираются с учетом:

Чувствительности к пробелам и символам.
При сопоставлении текстов программ следует игнорировать дополнительные пробелы, комментарии, а также имена переменных.

Подавления шума.
Обнаружение коротких совпадений не показательно, так как одно слово может встречаться в двух программах, потому что они написаны на одном языке. Все совпадения должны быть достаточно большими, чтобы считать, что программы скопированы.

Независимости от положения. Перестановка переменных или порядка строк в программе не должны влиять на обнаруженные совпадения. Добавление или удаление символов в тексте также не должно влиять на набор совпадений.
Исходный код программы разделяется на токены, так как это представление даст наиболее соответствующий требованиям результат. Многие компиляторы используют разделение текста на лексемы, а затем обрабатывают их список с помощью конечного автомата, преобразующий лексемы в токены. Библиотеки языка программирования Python позволяют обрабатывать текст без поиска лексем и преобразования их в токены, а делают токенизацию за один шаг.

Так как расстояние Левенштейна удовлетворяет требованиям, имеет наивысшую вероятность найти правильный результат, то реализован будет он.

Работа алгоритма будет осуществляться по схеме:

Преобразование нежелательных различий между документами.

Задание метрики (критерия близости).

Реализация нахождения расстояния Левенштейна.

Составление матрицы расстояний для определения похожести текстов.

Программа должна показывать, насколько коды программы похожи между собой.

Описание метода решения
Реализован модуль, который сначала разбивает каждую программу из массива решений студетов по предмету Математические Пакеты за 2015 и 2017 года на токены с помощью библиотеки tokenize. Далее сформированы списки из токенов для каждой программы. Реализован алгоритм нахождения расстояния Левенштейна для сравнения каждой программы с каждой. Результат записывается в файл формата csv, где содержатся названия сравниваемых программ и расстояния между ними.

Заключение
В результате выполнения работы была разработан программный модуль, осуществляющий поиск плагиата в кодах программ. Исходный код программы разделяется на токены, так как токенизация позволяет сохранять существенные и игнорировать легко модифицируемые детали кода программы. Для того, чтобы этот программный продукт удовлетворял требованиям (чувствительности к пробелам и символам, подавления шума, независимости от положения), проведен обзор метрик для обнаружения плагиата в текстах программ. Расстояние Левенштейна удовлетворяет требованиям и имеет наивысшую вероятность найти правильный результат: вероятность найти похожие программы, вероятность того, что похожие программы действительно похожие очень высокие. Недостатком решения являются затраты памяти на расчет расстояния Левенштейна. Но следует отметить, что для выполнения задач важно качество преобразований текста, а затраты менее важны. Преимуществом является открытый исходный код.

Программный модуль был протестирован на реальных данных: решениях задач студентов по программированию за 2015, 2017 года. Расстояние Левенштейна между текстами программ соответствует степени их похожести.

Для наглядной демонстрации результатов планируется построить кластеры, которые объединяют группы похожих решений.

Список литературы
[1] Бобкова О. В., Давыдов С. А., Ковалева И. А.Плагиат как гражданское правонарушение // Патенты и лицензии. — 2016. — № 7.

[2] Бойцов Л. М. Использование хеширования по сигнатуре для поиска по сходству //Прикладная математика и информатика. М. Изд-во факультета ВМиК, МГУ. – 2000. – №. 7. - C. 135-154.

[3] Schütze H., Manning C. D., Raghavan P. Introduction to information retrieval. – Cambridge University Press, 2008. – Т. 39. C. 19-47.

[4] Ullman J. D., Aho A. V., Hirschberg D. S. Bounds on the complexity of the longest common subsequence problem //Journal of the ACM (JACM). – 1976. – Т. 23. – №. 1. – С. 1-12.

[5] Lueker G. S. Improved bounds on the average length of longest common subsequences //Journal of the ACM (JACM). – 2009. – Т. 56. – №. 3. – С. 17.

[6] Левенштейн В. И. Двоичные коды с исправлением выпадений, вставок и замещений символов //Доклады Академии наук. – Российская академия наук, 1965. – Т. 163. – №. 4. – С. 845-848.

[7] Vitanyi P. M. B., Li M. An introduction to Kolmogorov complexity and its applications. – Heidelberg : Springer, 1997. – Т. 34. – №. 10.

[8] Успенский В., Шень А., Верещагин Н. Колмогоровская сложность и алгоритмическая случайность. – Litres, 2017. - C. 575.